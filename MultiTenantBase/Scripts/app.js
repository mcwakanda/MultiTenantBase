var APP = {};APP.settings = 	{	passwordSalt: "SomeRandomSaltHere",	defaultLanguage: "EN"};//Helper functionsAPP.getUserAccountID = function(userID){	if(userID == undefined){		userID = currentUser().ID;	}	return ds.User(userID).account.ID;};APP.getUserAccount = function(userID){	if(userID == undefined){		userID = currentUser().ID;	}	return ds.Account(APP.getUserAccountID(userID));}APP.getSessionAccount = function(){	if(userID == undefined){		userID = currentUser().ID;	}	return currentSession().storage.accountID;};APP.getAdminStatus = function(userID){	if(userID == undefined){		userID = currentUser().ID;	}	var groupArray = APP.getUserGroups(userID);	var adminStatus;	for(i = 0; i < groupArray.length; i++){		var element = groupArray[i];		var theGroup = directory.group(element);		adminStatus = theGroup.filterParents("AccountAdmin"); //determines if AccountAdmin group is in the directory hierarchy		if(adminStatus.length > 0 ){			return true;		}	}	return false;};APP.getUserLanguage = function(){	if(currentUser().name != "default guest"){		return currentUser().storage.language;	} else {		return APP.settings.defaultLanguage;	}};//Permissions and restricting queriesAPP.getReadCollection = function(dataClassName){	if(currentSession().belongsTo('Admin')){		//allow Admin user to access all data		return ds[dataClassName].all();	}	//Account restriction	var theCollection = ds[dataClassName].query('account.ID == :1', APP.getUserAccountID());		//Read permission restriction, redundant for most uses, but safer to implement both	if(APP.getAccountPermissionType() == "Advanced"){		//further limit to read permission entites based on Permission entities		var queryString = APP.buildReadQueryString		theCollection = theCollection.query(queryString);	}	return theCollection;}APP.getAccountPermissionType = function(){	var theAccount = ds.Account.find("ID == :1", APP.getUserAccountID());	return theAccount.permissionType}APP.getUserGroups = function(userID){	if(userID == undefined){		userID = currentUser().ID;	}	//returns the groups query string for onRestrictingQuery event	var theGroups = ds.Group.query("user.ID == :1", userID);	var groupArray = [];	theGroups.forEach(function(theGroup){		groupArray.push(theGroup.name);	});	return groupArray;}APP.buildReadQueryString = function(userID){	if(userID == undefined){		userID = currentUser().ID;	}	var groupArray = APP.getUserGroups(userID);	var theQueryString = "name==";	groupArray.forEach(function(theGroup){		theQueryString = theQueryString + "'" + theGroup.name + "'" + "||permissions.group.name=="; // will assemble name=Group1||name=Group2||	});	theQueryString = theQueryString.slice(-26); //removes the trailing ||permissions.group.name==	debugger;	return theQueryString;}