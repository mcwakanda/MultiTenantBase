model.Account.methods.registerAccount = function(regObj) {	// ** Promoted to Admin **	// a brand new registration, account validation should happen here	var nameConflict = ds.Account.find('name == :1', regObj.name);	if(nameConflict){		return APP.getError("duplicateAccountName");	} else {		try {//			ds.startTransaction();			var theAccount = new ds.Account({name: regObj.name});			theAccount.save();						//create the 'Owner' user			var theOwner = new ds.User({username: regObj.username, password: regObj.password, account: theAccount});			debugger;			theOwner.save();						new ds.Group({user: theOwner, name: "AccountOwner"}).save(); //Also get AccountAdmin & User through directory hierarchy//			ds.commit();			return true;		} catch(err){//			ds.rollback();			debugger;			return err;		}	}		};model.Account.methods.registerAccount.scope = 'public';